/* combinekh
 * ---------
 * Adds up series of k adjacent FIDs in a ser file. The value of k is read from
 * the status parameters td1 and cnst37. cnst37 is the "final" td1, i.e. the
 * number of FIDs after running combinekh. For use with 1H 2DJ or PSYCHE NOAH
 * modules.
 *
 * v: 2.0.17
 * Jonathan Yong & Tim Claridge, University of Oxford
 * Eriks Kupce, Bruker UK
 * 10 November 2021 */

#define MALLOC_ERROR "insufficient memory; aborting"
#define READ_ERROR "file read failed; aborting"
#define WRITE_ERROR "file write failed; aborting"

/* calculate sensitivity factor k */
float cnst37;
FETCHPARS("CNST 37", &cnst37)
int rounded_cnst37;
rounded_cnst37 = (int) (cnst37 + 0.5); /* round to nearest integer */
if (rounded_cnst37 == 0) STOPMSG("combinekh has already been run on this dataset")
int td1;
FETCHPAR1S("TD", &td1)
int k = td1 / rounded_cnst37;

// Check for various errors.
if (k == 1) STOP  // Nothing to do.
else if (td1 % rounded_cnst37 != 0) STOPMSG("error: TD1/cnst37 is not an integer")
else if (k < 0) STOPMSG("error: cnst37 cannot be negative")

/* open the ser file to read */
char ser[PATH_MAX + 64];
strcpy(ser, ACQUPATH("ser"));
FILE *fp;
if ((fp = fopen(ser, "rb")) == NULL) STOPMSG(READ_ERROR)

/* open the newser file to write */
char newser[PATH_MAX + 64];
strcpy(newser, ACQUPATH("newser"));
FILE *fq;
if ((fq = fopen(newser, "wb")) == NULL) STOPMSG(WRITE_ERROR)

/* number of scans */
int ns;
FETCHPARS("NS", &ns)

/* Round TD1 down to the nearest multiple of 2k.
 * This allows combinek to work even when acquisition is incomplete. */
td1 = td1 - (td1 % (2 * k));

/* number of points in FID */
int td;
FETCHPARS("TD", &td)

/* 2D function mode */ 
/* 0 - undefined; 1 - QF; 2-6 - various phase-sensitive methods */
int fnmode;
FETCHPAR1S("FnMODE", &fnmode)
/* if 2 <= fnmode <= 6, then we need to read two FIDs of data at once */
/* e.g. for fnmode = 6 (EA), we need to read echo + antiecho data together */
int nfid;
if ((2 <= fnmode) && (fnmode <= 6)) nfid = 2;
else nfid = 1;

/* data type */
/* 0 - (32-bit) int, 1 - float, 2 - (64-bit) double */
int dtypa;
FETCHPARS("DTYPA", &dtypa)

int dsize; /* sizeof (data type) */

if (dtypa == 0) {
    dsize = sizeof (int);
    /* round each block in FID to a multiple of 1024 bytes */
    int n = 1024 / dsize;
    td = (td % n) ? td - (td % n) + n : td;
    /* allocate memory */
    int *sum;
    int *row;
    if ((sum = malloc(dsize * td * nfid)) == NULL) STOPMSG(MALLOC_ERROR)
    if ((row = malloc(dsize * td * nfid)) == NULL) STOPMSG(MALLOC_ERROR)

    /* read in data and perform the summation */
    int m, i, j;
    for (m = 0; m < (td1 / (k * nfid)); m++) {
        /* initialise sum to zero */
        for (j = 0; j < td * nfid; j++) *(sum + j) = 0;
        /* read in k rows and add each of them to sum */
        for (i = 0; i < k; i++) {
            if (fread(row, dsize, td * nfid, fp) != td * nfid) STOPMSG(READ_ERROR)
            for (j = 0; j < td * nfid; j++) *(sum + j) += *(row + j);
        }
        /* write the sum to newser */
        if (fwrite(sum, dsize, td * nfid, fq) != td * nfid) STOPMSG(WRITE_ERROR)
    }

    /* clean up */
    free(sum);
    free(row);
    fclose(fp);
    fclose(fq);
}
else if (dtypa == 2) {
    dsize = sizeof (double);
    /* round each block in FID to a multiple of 1024 bytes */
    int n = 1024 / dsize;
    td = (td % n) ? td - (td % n) + n : td;
    /* allocate memory */
    double *sum;
    double *row;
    if ((sum = malloc(dsize * td * nfid)) == NULL) STOPMSG(MALLOC_ERROR)
    if ((row = malloc(dsize * td * nfid)) == NULL) STOPMSG(MALLOC_ERROR)

    /* read in data and perform the summation */
    int m, i, j;
    for (m = 0; m < (td1 / (k * nfid)); m++) {
        /* initialise sum to zero */
        for (j = 0; j < td * nfid; j++) *(sum + j) = 0;
        /* read in k rows and add each of them to sum */
        for (i = 0; i < k; i++) {
            if (fread(row, dsize, td * nfid, fp) != td * nfid) STOPMSG(READ_ERROR)
            for (j = 0; j < td * nfid; j++) *(sum + j) += *(row + j);
        }
        /* write the sum to newser */
        if (fwrite(sum, dsize, td * nfid, fq) != td * nfid) STOPMSG(WRITE_ERROR)
    }

    /* clean up */
    free(sum);
    free(row);
    fclose(fp);
    fclose(fq);
}
else STOPMSG("unknown data type; aborting")

/* backup old ser file */
char serbak[PATH_MAX + 64];
strcpy(serbak, ACQUPATH("ser.bak"));
if ((fp = fopen(ser, "rb")) == NULL) STOPMSG(READ_ERROR)
if ((fq = fopen(serbak, "wb")) == NULL) STOPMSG(WRITE_ERROR)

int c;
while ((c = getc(fp)) != EOF) putc(c,fq);
fclose(fp);
fclose(fq);

/* overwrite ser file with newser */
if ((fp = fopen(newser, "rb")) == NULL) STOPMSG(READ_ERROR)
if ((fq = fopen(ser, "wb")) == NULL) STOPMSG(WRITE_ERROR)
while ((c = getc(fp)) != EOF) putc(c,fq);
fclose(fp);
fclose(fq);
remove(newser); /* if we got all the way here we don't need it anymore */

/* overwrite previous parameters */
STOREPAR1S("TD", td1/k)
STOREPAR1("TD", td1/k)
STOREPARS("NS", ns*k)
STOREPAR("NS", ns*k) 
/* prevent user from running combinekh twice on the same dataset */
STOREPARS("CNST 37", 0.0)

QUIT
// vim: ft=c
