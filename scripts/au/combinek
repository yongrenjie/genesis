/* combinek
 * --------
 * Adds up series of k adjacent FIDs in a ser file. The value of k is read from
 * the status parameter cnst39. For use with 15N NOAH modules.
 *
 * v: 2.0.3
 * Jonathan Yong & Tim Claridge, University of Oxford
 * Eriks Kupce, Bruker UK
 * 19 February 2021 */

/* read sensitivity factor k */
float cnst39;
FETCHPARS("CNST 39", &cnst39)
int k;
k = (int) (cnst39 + 0.5); /* round to nearest integer - directly casting always rounds down */

/* Check for invalid values of k.
   We don't spawn a message box if k == 1, because the user may have purposely chosen that */
if (k == 0)      STOPMSG("combinek has already been run on this dataset")
else if (k == 1) STOP
else if (k < 0)  STOPMSG("error: cnst15 cannot be negative")

/* open the ser file to read */
char ser[PATH_MAX + 64];
strcpy(ser, ACQUPATH("ser"));
FILE *fp;
if ((fp = fopen(ser, "rb")) == NULL) {
    STOPMSG("cannot read ser file")
}

/* open the newser file to write */
char newser[PATH_MAX + 64];
strcpy(newser, ACQUPATH("newser"));
FILE *fq;
if ((fq = fopen(newser, "wb")) == NULL) {
    STOPMSG("cannot open newser file for writing")
}

/* number of scans */
int ns;
FETCHPARS("NS", &ns)

/* number of t1 increments */
int td1;
FETCHPAR1S("TD", &td1)
/* Round TD1 down to the nearest multiple of 2k (factor of 2 because we
 * need both echo and antiecho).
 * This allows combinek to work even when acquisition is incomplete. */
td1 = td1 - (td1 % (2 * k));

/* number of points in FID */
int td;
FETCHPARS("TD", &td)

/* 2D function mode */ 
/* 0 - undefined; 1 - QF; 2-6 - various phase-sensitive methods */
int fnmode;
FETCHPAR1S("FnMODE", &fnmode)
/* if 2 <= fnmode <= 6, then we need to read two FIDs of data at once */
/* e.g. for fnmode = 6 (EA), we need to read echo + antiecho data together */
int nfid;
if ((2 <= fnmode) && (fnmode <= 6)) nfid = 2;
else nfid = 1;

/* data type */
/* 0 - (32-bit) int, 1 - float, 2 - (64-bit) double */
int dtypa;
FETCHPARS("DTYPA", &dtypa)

int dsize = 0; /* sizeof (data type) */
if (dtypa == 0) dsize = sizeof (int);
else STOPMSG("combinek only works with TopSpin 3 (integer) data...")

/* each row starts at a new block of 1024 bytes */
/* hence we need to round TD up to the closest multiple of (1024/dsize) = 256 */
td = (td % 256) ? td - (td % 256) + 256 : td;
/* allocate memory */
int *sum;
if ((sum = malloc(dsize * td * nfid)) == NULL) {
    STOPMSG("insufficient memory -- please don't use a potato for this")
}
int *row;
if ((row = malloc(dsize * td * nfid)) == NULL) {
    STOPMSG("insufficient memory -- please don't use a potato for this")
}
/* read in data and perform the summation */
int m, i, j;
for (m = 0; m < (td1/(k*nfid)); m++) {
    /* initialise sum to zero */
    for (j = 0; j < td*nfid; j++) {
        *(sum+j) = 0;
    }
    /* read in k rows and add each of them to sum */
    for (i = 0; i < k; i++) {
        if (fread(row, dsize, td*nfid, fp) != td*nfid) {
            STOPMSG("failed to read the necessary amount of data")
        }
        
        for (j = 0; j < td*nfid; j++) {
            *(sum+j) += *(row+j); /* TODO need to check for overflow */
        }
    }
    /* write the sum to newser */
    if (fwrite(sum, dsize, td*nfid, fq) != td*nfid) {
        STOPMSG("failed to write to the new ser file")
    }
}

/* clean up */
free(sum);
free(row);
fclose(fp);
fclose(fq);

/* backup old ser file */
char serbak[PATH_MAX + 64];
strcpy(serbak, ACQUPATH("ser.bak"));
if ((fp = fopen(ser, "rb")) == NULL) {
    STOPMSG("cannot read ser file")
}
if ((fq = fopen(serbak, "wb")) == NULL) {
    STOPMSG("cannot open ser.bak file for writing")
}
int c;
while ((c = getc(fp)) != EOF) putc(c,fq);
fclose(fp);
fclose(fq);

/* overwrite ser file with newser */
if ((fp = fopen(newser, "rb")) == NULL) {
    STOPMSG("cannot read newser file")
}
if ((fq = fopen(ser, "wb")) == NULL) {
    STOPMSG("cannot open ser file for writing")
}
while ((c = getc(fp)) != EOF) putc(c,fq);
fclose(fp);
fclose(fq);
remove(newser); /* if we got all the way here we don't need it anymore */

/* overwrite previous parameters */
STOREPAR1S("TD", td1/k)
STOREPAR1("TD", td1/k)
STOREPARS("NS", ns*k)
STOREPAR("NS", ns*k) 
/* prevent user from running combinek twice on the same dataset */
STOREPARS("CNST 39", 0.0)

QUIT
// vim: ft=c
