/* splitx_au
 * ---------
 * Splits a NOAH dataset into NBL different individual datasets which can then
 * be separately processed. If the NOAH dataset has expno M, the individual
 * datasets will have expnos starting from (1000 * M) + 1.
 * 
 * This AU programme also parses the pulse programme text in order to determine
 * what subsidiary AU programmes (noah_xxxx) to use for processing the
 * individual datasets. If necessary, this behaviour can be overruled by
 * specifying the noah_xxxx programmes as the userP1 through userP5 processing
 * parameters.
 *
 * v: 2.0.0
 * Jonathan Yong & Tim Claridge, University of Oxford
 * Eriks Kupce, Bruker UK
 * 7 November 2020 */

int    *irow;
double *drow;
int i, j, k;
int fntype = 0;
char path[PATH_MAX + 64], proc_nm[8];

// Check if dataset is 2D
int parmode;
FETCHPAR("PARMODE", &parmode)
if (parmode != 1) STOPMSG("Program is only suitable for 2D")

// Check if NBL > 1. As of the time of writing, NBL can only go up to 5, so
// the check for NBL > 8 is slightly excessive. However, this cap on NBL will
// (in all likelihood) be increased in the future, so setting a higher check
// on NBL future-proofs this script to some extent.
int nbl;
FETCHPAR("NBL", &nbl)
if ((nbl < 2) || (nbl > 8)) STOPMSG("Program is only suitable for 2 <= NBL <= 7")

// Read in more parameters
int dtypa, byteorder, tds, td1, td1s;
FETCHPARS("DTYPA", &dtypa)
FETCHPARS("BYTORDA", &byteorder)
FETCHPARS("TD", &tds)
FETCHPAR1("TD", &td1)
FETCHPAR1S("TD", &td1s)

int full_td1;   // 'full' value of TD1 post-reconstruction
// Check whether NUS was used.
int nus = 0;  // flag to indicate whether NUS was used
char zgoptns[128];
double nusamount;
FETCHPARS("ZGOPTNS", zgoptns);
if (strstr(zgoptns, "-DNUS") != NULL) {
    nus = 1;
    FETCHPAR("NusAMOUNT", &nusamount)
    full_td1 = (int) (td1 * 100 / nusamount + 0.5);
    // (int) (x + 0.5) rounds x to nearest int
}

// Each FID in a ser file starts at a 1024-byte boundary.
int dlen;  // number of bytes per data point
// tdr is tds, rounded up to the nearest multiple of 256 or 128 as appropriate.
size_t tdr = (size_t) tds;
// Integer data (TopSpin 3)
if (dtypa == 0) {
    tdr = ((tdr + 255) / 256) * 256;
    dlen = 4;
}
// Float data (TopSpin 4)
else if (dtypa == 2) {
    tdr = ((tdr + 127) / 128) * 128;
    dlen = 8;
}
else STOPMSG("Program is only suitable for integer or double data")

// Perform several more checks on TD.
if ((tds <= 0) || (tdr > MAXINT)) {
    Proc_err(DEF_ERR_OPT, "acquisition status parameter TD{F2} = %d\nout of range", tds);
    ABORT
}
int td = (int) tdr;
if ((td <= 0) || (td > 64 * 1024 * 1024)) STOPMSG("TD{F2} out of range")
if ((td1s <= 0) || (td1s > 64 * 1024 * 1024)) STOPMSG("TD{F1} out of range")
int td_times_nbl = td * nbl;
if ((double) td_times_nbl >= 2. * 1024 * 1024 * 1024 / dlen) STOPMSG("amount of memory requested too large")

// Calculate the EXPNOs to write to. By default this is set to n * 1000 + 1 and onwards.
int oexpno = expno;
int nexpno = expno * 1000 + 1;
if (nexpno <= 0) STOPMSG("invalid expno value")

// Write parameters to the new expnos.
for (i = 0; i < nbl; i++) {
    WRAPARAM(nexpno + i)
    ERRORABORT
}

// Open the files and error out if fopen() fails on any of them.
FILE *fp_ser_combined;  // combined ser file in original expno
strcpy(path, ACQUPATH("ser"));
if ((fp_ser_combined = fopen(path, "rb")) == 0) STOPMSG(strcat(path, " - cannot open file for reading"))
// fp_new_sers[0] through fp_new_sers[nbl - 1] refer to the split ser files.
FILE **fp_new_sers = calloc(nbl, sizeof(FILE *));
for (i = 0; i < nbl; i++) {
    // Set expno to the new ones so that ACQUPATH() returns the ser file of the new expno.
    expno = nexpno + i;
    strcpy(path, ACQUPATH("ser"));
    if ((fp_new_sers[i] = fopen(path, "wb")) == 0) STOPMSG(strcat(path, " - cannot open file for writing"))
}
// Reset expno.
expno = oexpno;

// Allocate memory buffers for reading in data.
if (dtypa == 0) {
    if ((irow = malloc(td_times_nbl * dlen)) == NULL) STOPMSG("cannot get enough memory")
}
else if (dtypa == 2) {
    if ((drow = malloc(td_times_nbl * dlen)) == NULL) STOPMSG("cannot get enough memory")
}

// split
k = td1s / nbl;

if (dtypa == 0) {
    for (i = 0; i < k; i++) {
        if (fread(irow, dlen, td_times_nbl, fp_ser_combined) != (size_t)(td_times_nbl)) STOPMSG("read failed")
        local_swap4(irow, td_times_nbl * dlen, byteorder);
        for (j = 0; j < nbl; j++) {
            if (fwrite(irow+j*td, dlen, td, fp_new_sers[j]) != (size_t)(td)) STOPMSG("write failed")
        }
    }
}
else if (dtypa == 2) {
    for (i = 0; i < k; i++) {
        if (fread(drow, dlen, td_times_nbl, fp_ser_combined) != (size_t)(td_times_nbl)) STOPMSG("read failed")
        local_swap4(drow, td_times_nbl * dlen, byteorder);
        for (j = 0; j < nbl; j++) {
            if (fwrite(drow+j*td, dlen, td, fp_new_sers[j]) != (size_t)(td)) STOPMSG("write failed")
        }
    }
}

// free memory
fclose(fp_ser_combined);
for (i = 0; i < nbl; i++) fclose(fp_new_sers[i]);
if (dtypa == 0) free(irow);
else if (dtypa == 2) free(drow);

/***** store parameters and generate audit entry ***/

td1  /= nbl;
td1s /= nbl;
strcpy(path, ACQUPATH(0));
byteorder = local_endian();
int ds_size[3];
ds_size[0] = td;
ds_size[1] = td1s;

char pp_name[PATH_MAX];      // pulse programme name
FETCHPARS("PULPROG", pp_name)
char pp_path[PATH_MAX];      // path to pulse programme file
if (getParfileDirForRead(pp_name, PP_DIRS, pp_path) < 0) {
    // if it can't find the pulse programme, use the compiled version.
    strcpy(pp_path, ACQUPATH("pulseprogram"));
}
// if some version of the pulse programme was found, hunt inside it for processing AU programmes
int found_in_pp = 0;  // flag to keep track of whether the auprog was found in the pulse programme
int x;  // loop counter
// allocate memory. here we actually need malloc since it is dynamic.
char **auto_auprogs = malloc(nbl * sizeof (char *));
for (x = 0; x < nbl; x++) {
    *(auto_auprogs + x) = malloc(PATH_MAX * sizeof (char));
}
if (*pp_path) {
    FILE *pulprog_fp = fopen(pp_path, "r");
    char line[PATH_MAX];
    // getline() only works in TopSpin 4, fgets always works
    while (fgets(line, PATH_MAX, pulprog_fp) != NULL) {
        if (*line != ';') continue;                  // not a comment
        else if (!strstr(line, "auprog")) continue;  // auprog not in line
        else {   // found the comment with auprog
            char *s = line;
            for (x = 0; x < nbl; x++) {
                while (*s++ != ':') ; // skip until after the first colon
                while (isspace(*s)) s++; // skip any leading whitespace
                // read in the name of the AU programme. Any trailing
                // whitespace is OK as TopSpin will trim it off after STOREPAR.
                char *t = *(auto_auprogs + x);
                // strcpy s into t until we hit a colon, newline or EOF
                while (*s != ':' && *s != '\r' && *s != '\n' && *s != '\0' && *s != 'EOF') {
                    *t++ = *s++;
                }
                *t = '\0';
                // if we reached the end of the line, break immediately
                if (*s == '\r' || *s == '\n' || *s == '\0' || *s == 'EOF') break;
            }
            // if we managed to read all NBL modules in, then the loop index
            // x should be equal to nbl - 1 and we can turn on the flag.
            if (x == nbl - 1) found_in_pp = 1;
            break;
        }
    }
    fclose(pulprog_fp);
}
  
for (i = 0; i < nbl; i++) {
    double ymin, ymax;
    char  autext[PATH_MAX + 256];
    char* hashbuf = autext + sprintf(autext, "created by splitx");

    hashbuf += sprintf(hashbuf, " %d", nbl);
    hashbuf += sprintf(hashbuf, " %d. dataset from\n       %s", i + 1, path);

    DATASET(name, nexpno + i, procno, disk, user)

    char userPx[7];
    char auprog[32];
    // read from userPx first, these should override the autodetected ones
    sprintf(userPx, "userP%d", i + 1);
    FETCHPAR(userPx, auprog)
    if (!*auprog && found_in_pp) { // not set
        strcpy(auprog, *(auto_auprogs + i)); // get it from what we read earlier
    }
    if (!*auprog) { // still not set
        Proc_err(DEF_ERR_OPT, "Processing AU scripts not found, please specify as USERP1-USERP5.");
        ABORT
    }
    STOREPAR("AUNMP", auprog)

    STOREPAR("NBL", 1)
    STOREPARS("NBL", 1)
    STOREPARS("BYTORDA", byteorder)
    STOREPAR1("TD", td1)
    STOREPAR1S("TD", td1s)

    /* If NUS is enabled, copy vclist -> nuslist and carry out NUS processing. */
    if (nus == 1) {
    	char path_vclist[256], path_nuslist[256];

        strcpy(path_vclist, ACQUPATH("vclist"));
        strcpy(path_nuslist, ACQUPATH("nuslist"));
        if (access(path_vclist, F_OK) == 0) {
            rename(path_vclist, path_nuslist);
            STOREPARS("FnTYPE", 2)
            STOREPAR("Mdd_CsALG", 1)
            STOREPAR("Mdd_CsNITER", 50)
            STOREPAR("Mdd_CsVE", 0)
            STOREPAR1S("NusTD", full_td1 / nbl)
        }
    }

    if (CheckSumFileMax(ACQUPATH("ser"), 0, hashbuf, 0, 0, byteorder, 0, parmode + 1, tds, ds_size, ds_size, &ymin, &ymax) > 0) {
        AuditCreate(ACQUPATH("audita.txt"), autext);
        STOREPARS("YMIN_a", ymin)
        STOREPARS("YMAX_a", ymax)
    }
    XAUPW;

    REFRESHDATA
    XCMD("sendgui browse_update_tree")
    Show_meta(SM_RAW | SM_RAWP);
}

for (x = 0; x < nbl; x++) free(*(auto_auprogs + x));
free(auto_auprogs);

Show_status("splitx done.");
QUIT
// vim: ft=c
