; ngn_noah5-BSpnSpCT

; 13C HMBC
; 15N sensitivity-enhanced HSQC
;     [set SW(ppm) as cnst40; optional k-scaling with cnst39]
; 13C sensitivity-enhanced HSQC
;     [use -DEDIT for multiplicity editing]
; 1H COSY + TOCSY (echo/antiecho F1)

;$CLASS=HighRes
;$DIM=2D
;$TYPE=
;$SUBTYPE=
;$COMMENT=

;E. Kupce, T. D. W. Claridge
;Angew. Chem. Int. Ed. 2017, 56 (39), 11779-11783
;NOAH: NMR Supersequences for Small Molecule Analysis and Structure Elucidation

;E. Kupce, T. D. W. Claridge
;J. Magn. Reson. 2019, 307, 106568
;New NOAH modules for structure elucidation at natural isotopic abundance

#include <Avance.incl>
#include <Grad.incl>
#include <Delay.incl>

#ifdef NUS
define list<loopcounter> t1list=<$VCLIST>
#endif

define delay DC_HMBC_CNF1
define delay DC_HMBC_CNF2
define delay DC_HMBC_CNF3
define delay DC_HMBC_CNF4
define delay DC_HMBC_CNF5
define delay DC_HMBC_CNF6
define delay DC_SEHSQC1
define delay DC_SEHSQC2
define delay DC_SEHSQC3
define delay DC_SEHSQC4
define delay DC_SEHSQC5
define delay DC_SEHSQC6
define delay DC_SEHSQC7
define delay DC_SEHSQC8
define delay DC_SEHSQC9
define delay DC_SEHSQC10
define delay DH_COSY_TOCSY1
define delay DH_COSY_TOCSY2
define delay DN_SEHSQC1
define delay DN_SEHSQC2
define delay DN_SEHSQC3
define delay DN_SEHSQC4
define delay DN_SEHSQC5
define delay DN_SEHSQC6
define delay DN_SEHSQC7
"cnst41         = 2*sfo2/sfo1"                  ; gradient ratio
"cnst44         = 2*sfo3/sfo1"                  ; gradient ratio
"d0             = 3u"                           ; 13C t1
"d2             = 0.5s/cnst2"                   ; JCOMP
"d4             = 0.25s/cnst2"                  ; 13C INEPT
"d7             = 0.5s/cnst13"                  ; 13C LR coupling evolution
"d10            = 3u"                           ; COSY/TOCSY t1
"d20            = 3u"                           ; 15N HSQC t1/2
"d24            = 0.25s/cnst4"                  ; 15N INEPT
"in0            = inf1/2"                       ; 13C increment
"in10           = 2*dw"                         ; COSY/TOCSY increment
"in20           = 1000000/(2*cnst40*sfo3)"      ; 15N HSQC increment: cnst40 = SW(15N)
"l11            = (d9/(p6*115.112))/2"          ; half the number of DIPSI-2 loops
"l12            = l11*2"                        ; number of DIPSI-2 loops
"p2             = p1*2"                         ; 1H hard 180
"p17            = p16*cnst16"                   ; Longer gradients for 15N seHSQC v2
"p22            = p21*2"                        ; 15N hard 180
"DC_HMBC_CNF1   = d4-p31/2"                    
"DC_HMBC_CNF2   = d4+p31/2"                    
"DC_HMBC_CNF3   = 1s/(2*cnst6)-p16-d16"        
"DC_HMBC_CNF4   = 1s/(2*cnst7)-p16-d16"        
"DC_HMBC_CNF5   = d7-p16-d16-4u"               
"DC_HMBC_CNF6   = p16+d16+p2/2+d0-p3*2/PI+4u"  
"DC_SEHSQC1     = d4-p14/2"                     ; zz-filter
"DC_SEHSQC2     = d4+p14/2"                     ; zz-filter
"DC_SEHSQC3     = d4-larger(p2,p14)/2"          ; INEPT
"DC_SEHSQC4     = p16+d16+p2+d0*2-4u-p3*2/PI"   ; 13C pre-t1 if editing
"DC_SEHSQC5     = d2-p16-d16+p3*2/PI"           ; 13C editing period
"DC_SEHSQC6     = d2-p2-p3*2/PI"                ; 13C editing period
"DC_SEHSQC7     = p16+d16+p2/2+d0-4u-p3*2/PI"   ; 13C pre-/post-t1 if no editing
"DC_SEHSQC8     = d6-cnst17*p24/2-p19-d16"      ; first spin echo after t1
"DC_SEHSQC9     = d4-larger(p2,p14)/2-p16-d16"  ; second spin echo after t1
"DC_SEHSQC10    = p16+d16-p1*0.78+de+8u"        ; final spin echo for refocusing gradient
"DH_COSY_TOCSY1 = p16+d16+4u-d10"              
"DH_COSY_TOCSY2 = p16+d16"                     
"DN_SEHSQC1     = d24-p22/2"                    ; zz-filter
"DN_SEHSQC2     = d24+p22/2"                    ; zz-filter
"DN_SEHSQC3     = d24-larger(p2,p22)/2"         ; INEPT
"DN_SEHSQC4     = p17+d16+p2/2+d20-4u"          ; 15N pre- and post-t1, if no editing
"DN_SEHSQC5     = d26-larger(p2,p22)/2-p19-d16" ; first spin echo after t1
"DN_SEHSQC6     = d24-larger(p2,p22)/2-p16-d16" ; second spin echo after t1
"DN_SEHSQC7     = p17+d16-p1*0.78+de+8u"        ; final spin echo for refocusing gradient
define list<gradient> GC_HMBC_CNF={cnst41}
define list<gradient> GC_SEHSQC={cnst41}
define list<gradient> GN_SEHSQC={cnst44}
"l0      = td1/10"             ; Total number of 13C t1 increments
"l1      = 0"                 ; Running counter of 13C t1 increments
"l2      = 0"                 ; Counter, even for echo, odd for antiecho
"l3      = 0"                 ; Running counter for NS
"l6      = d15/(larger(p45,1u)*20)"  ; Number of ASAP loops
"acqt0   = 0"
baseopt_echo

1 ze
2 30m
3 5m
4 50u UNBLKGRAD

#ifdef NUS
  "d0=(in0*t1list)+3u"
  "d10=(in10*t1list)+3u"
  "d20=(in20*t1list)+3u"
#endif
  "l3 = l3 + 1"

  ; Cleanup
  4u pl2:f2
  (p3 ph0):f2
  4u pl3:f3
  (p21 ph0):f3
  4u pl1:f1
  p16:gp0
  d16
  (p1 ph0):f1
  4u
  p16:gp0*1.37
  d16
  4u BLKGRAD
  d1 st0
  4u UNBLKGRAD


  ; MODULE 1
  ; 13C-1H HMBC
  
  ; 15N and 13C zz-filter
  (p1 ph0):f1
  DC_HMBC_CNF1
  (p31:sp18 ph11):f2 
  (center (p2 ph0):f1 (p22 ph0):f3)
  DC_HMBC_CNF2
  (p1 ph0):f1
  DC_HMBC_CNF1
  (p31:sp18 ph11):f2 
  (center (p2 ph0):f1 (p22 ph0):f3)
  DC_HMBC_CNF2 pl2:f2

  ; second-order low-pass J-filter
  (p1 ph0):f1
  DC_HMBC_CNF3
  p16:gp10*-3
  d16
  (p3 ph7):f2
  DC_HMBC_CNF4
  p16:gp10*2
  d16
  (p3 ph7):f2
  4u
  p16:gp10
  d16
  DC_HMBC_CNF5  ; nJ(CH) evolution

  ; coherence transfer to 13C and t1
  (p3 ph7):f2
  DC_HMBC_CNF6
  (p14:sp3 ph0):f2
  4u
  p16:gp1
  d16
  d0
  (p2 ph11):f1
  d0
  4u
  p16:gp1
  d16
  (p14:sp3 ph0):f2
  DC_HMBC_CNF6 pl2:f2
  (p3 ph5):f2
  (p2 ph0):f1
  4u
  p16:gp1*EA*GC_HMBC_CNF
  d16
  4u
  goscnp ph30

  ; Cleanup
  4u pl1:f1
  4u pl2:f2
  (p3 ph0):f2
  4u pl3:f3
  (p21 ph0):f3
  4u
  p16:gp0*1.77
  2m st


  ; MODULE 2
  ; 15N-1H seHSQC

  ; reverse zz-filter
  (p1 ph0):f1
  DN_SEHSQC1
  (p22 ph0):f3
  (p2 ph0):f1
  DN_SEHSQC2
  (p1 ph0):f1
  DN_SEHSQC1
  (p22 ph0):f3
  (p2 ph0):f1
  DN_SEHSQC2            ; 15N-1H: y,  X-1H: z

  ; forward INEPT
  (p1 ph3):f1
  DN_SEHSQC3
  4u
  (center (p2 ph0):f1 (p22 ph0):f3 )
  4u
  DN_SEHSQC3
  4u
  (p1 ph1):f1
  (p21 ph4):f3

  ; t1 evolution
  4u
  DN_SEHSQC4
  (p22 ph0):f3
  p17:gp2
  d16
  d20
  (p2 ph7):f1
  d20
  p17:gp2
  d16
  (p22 ph0):f3
  4u
  DN_SEHSQC4

  ; reverse INEPT for first component
  (center (p1 ph0):f1 (p21 ph7):f3 )
  p19:gp8
  d16
  DN_SEHSQC5
  (center (p2 ph0):f1 (p22 ph0):f3 )
  DN_SEHSQC5
  p19:gp8
  d16
  (center (p1 ph1):f1 (p21 ph9):f3 )

  ; reverse INEPT for second component
  p16:gp9
  d16
  DN_SEHSQC6
  (center (p2 ph0):f1 (p22 ph0):f3 )
  DN_SEHSQC6
  p16:gp9
  d16
  (p1 ph0):f1

  ; spin echo for refocusing gradient
  DN_SEHSQC7
  (p2 ph0):f1
  4u
  p17:gp2*EA*GN_SEHSQC
  d16 pl16:f3
  4u
  goscnp ph29 cpd3:f3
  50u do:f3

  ; Cleanup
  4u pl1:f1
  4u pl3:f3
  (p21 ph0):f3
  4u
  p16:gp0*2.32
  2m st


  ; MODULE 3
  ; 13C-1H seHSQC (with ZIP element)

  ; ZIP
  (p1 ph0):f1
  DC_SEHSQC1
  (p14:sp3 ph0):f2
  (p2 ph0):f1
  DC_SEHSQC2
  (p1 ph0):f1
  DC_SEHSQC1
  (p14:sp3 ph0):f2
  (p2 ph0):f1
  DC_SEHSQC2            ; 13C-1H: y,  12C-1H: z

  ; forward INEPT
#ifdef EDIT
  (p1 ph1):f1
#else
  (p1 ph3):f1
#endif /* EDIT */
  DC_SEHSQC3
  4u
  (center (p2 ph0):f1 (p14:sp3 ph0):f2 )
  4u
  DC_SEHSQC3 pl2:f2
  4u
  (p1 ph1):f1 (p3 ph5):f2

  ; t1 evolution with optional multiplicity editing
#ifdef EDIT
  4u
  DC_SEHSQC4
  (p31:sp18 ph0):f2
  p16:gp4
  d16 pl2:f2

  d0
  (p2 ph7):f1
  d0

  p16:gp4
  d16
  DC_SEHSQC5
  (p31:sp18 ph0):f2
  (p2 ph0):f1
  DC_SEHSQC6 pl2:f2
#else
  4u
  DC_SEHSQC7 
  (p24:sp7 ph0):f2
  p16:gp4
  d16 pl2:f2

  d0
  (p2 ph7):f1
  d0

  p16:gp4
  d16
  (p24:sp7 ph0):f2
  4u
  DC_SEHSQC7 pl2:f2
#endif /* EDIT */

  ; reverse INEPT for first component
  (center (p1 ph0):f1 (p3 ph7):f2 )
  p19:gp6
  d16
  DC_SEHSQC8
  (center (p2 ph0):f1 (p24:sp7 ph0):f2 )
  DC_SEHSQC8
  p19:gp6
  d16 pl2:f2
  (center (p1 ph1):f1 (p3 ph9):f2 )  ; seHSQC pulse, incremented with EA

  ; reverse INEPT for second component
  p16:gp7
  d16
  DC_SEHSQC9
  (center (p2 ph0):f1 (p14:sp3 ph0):f2 )
  DC_SEHSQC9
  p16:gp7
  d16
  (p1 ph0):f1

  ; spin echo for refocusing gradient
  DC_SEHSQC10
  (p2 ph0):f1
  4u
  p16:gp4*EA*GC_SEHSQC
  d16 pl12:f2
  4u
  goscnp ph30 cpd2:f2   ; acquire 13C HSQC
  50u do:f2

  ; ASAP mixing
if "d15 > 1m"
{
  50u
  p16:gp0*0.4
  d16
  4u
						;begin ASAP
6 (p45:sp45 ph=0.0):f1
  (p45:sp45 ph=150.0):f1
  (p45:sp45 ph=60.0):f1
  (p45:sp45 ph=150.0):f1
  (p45:sp45 ph=0.0):f1
  (p45:sp45 ph=0.0):f1
  (p45:sp45 ph=150.0):f1
  (p45:sp45 ph=60.0):f1
  (p45:sp45 ph=150.0):f1
  (p45:sp45 ph=0.0):f1
  (p45:sp45 ph=180.0):f1
  (p45:sp45 ph=330.0):f1
  (p45:sp45 ph=240.0):f1
  (p45:sp45 ph=330.0):f1
  (p45:sp45 ph=180.0):f1
  (p45:sp45 ph=180.0):f1
  (p45:sp45 ph=330.0):f1
  (p45:sp45 ph=240.0):f1
  (p45:sp45 ph=330.0):f1
  (p45:sp45 ph=180.0):f1
  lo to 6 times l6
						;end ASAP
  4u pl1:f1
}

  ; Cleanup
  4u pl1:f1
  4u pl2:f2
  (p3 ph0):f2
  4u
  p16:gp0*-1.29
  2m st


  ; MODULE 4
  ; 1H-1H COSY + TOCSY

  ; COSY
  (p1 ph5):f1
  DH_COSY_TOCSY1
  (p2 ph0):f1
  4u
  p16:gp5
  d16
  d10
  (p1 ph0):f1
  4u
  p16:gp5*EA
  d16
  goscnp ph31    ; acquire H-H COSY
  2m st

  ; TOCSY
  10u gron12
  (p32:sp29 ph0):f1  ; ZQ suppression
  20u groff
  d16 pl10:f1

						;begin DIPSI2
8 p6*3.556 ph3
  p6*4.556 ph1
  p6*3.222 ph3
  p6*3.167 ph1
  p6*0.333 ph3
  p6*2.722 ph1
  p6*4.167 ph3
  p6*2.944 ph1
  p6*4.111 ph3

  p6*3.556 ph1
  p6*4.556 ph3
  p6*3.222 ph1
  p6*3.167 ph3
  p6*0.333 ph1
  p6*2.722 ph3
  p6*4.167 ph1
  p6*2.944 ph3
  p6*4.111 ph1

  p6*3.556 ph1
  p6*4.556 ph3
  p6*3.222 ph1
  p6*3.167 ph3
  p6*0.333 ph1
  p6*2.722 ph3
  p6*4.167 ph1
  p6*2.944 ph3
  p6*4.111 ph1

  p6*3.556 ph3
  p6*4.556 ph1
  p6*3.222 ph3
  p6*3.167 ph1
  p6*0.333 ph3
  p6*2.722 ph1
  p6*4.167 ph3
  p6*2.944 ph1
  p6*4.111 ph3
  lo to 8 times l12
						;end DIPSI2

  p16:gp11
  d16
  10u gron12*1.333
  (p32*0.75:sp29 ph0):f1  ; ZQ suppression
  20u groff
  d16 pl1:f1
  4u

  (p1 ph0):f1
  DH_COSY_TOCSY2
  de
  4u
  (p2 ph7):f1
  4u
  p16:gp5*EA
  d16

  go=2 ph31

  ; echo/antiecho loop
  "l2 = l2 + 1"
  1m igrad EA
  1m ip9*2
  30m wr #0 if #0 zd
  lo to 3 times 2

  ; t1 incrementation
  "l1 = l1 + 1"
#ifdef NUS
  1m t1list.inc
#endif
  1m ip5*2
  1m ip30*2
  1m ip31*2

  ; 13C t1 incrementation
#ifdef NUS
#else
  1m id0
#endif

  ; 1H t1 incrementation
#ifdef NUS
#else
  1m id10
#endif /* NUS */

  ; 15N t1 incrementation
#ifdef NUS
  1m ip4*2
  1m ip29*2
#else
if "l1 % cnst39 == 0"
{
  1m id20
  1m ip4*2
  1m ip29*2
}
#endif /* NUS */

  lo to 4 times l0

50u BLKGRAD
exit

ph0=0
ph1=1
ph3=3
ph4=0 2
ph5=0 2
ph7=0 0 2 2
ph9=1 1 3 3
ph11=0 0 0 0 2 2 2 2
ph29=0 2 2 0
ph30=0 2 2 0
ph31=0 2

;gpnam0: SMSQ10.100
;gpnam1: SMSQ10.100
;gpnam2: SMSQ10.100
;gpnam4: SMSQ10.100
;gpnam5: SMSQ10.100
;gpnam6: SMSQ10.100
;gpnam7: SMSQ10.100
;gpnam8: SMSQ10.100
;gpnam9: SMSQ10.100
;gpnam10: SMSQ10.100
;gpnam11: SMSQ10.100
;gpz0: 24% (for purging)
;gpz1: 80% (HMBC CTP)
;gpz2: 80% (15N CTP)
;gpz4: 70% (13C CTP)
;gpz5: 10% (1H CTP)
;gpz6: 11% (13C spin echo CTP)
;gpz7: -5% (13C spin echo CTP)
;gpz8: 13% (15N spin echo CTP)
;gpz9: -6% (15N spin echo CTP)
;gpz10: 5% (HMBC J-filter)
;gpz11: 43% (1H purge gradient)
;gpz12: 11% (1H ZQ filter)

;WaveMaker shaped pulses (use 'wvm -a' to generate)
;sp3:wvm:wu180C13: cawurst-20(60 kHz, 0.5 ms; L2H)
;sp18:wvm:wu180Jcomp: cawurst-40(280 ppm; Jcomp, L2H)
;sp45:wvm:wuASAP: cawurst-2(30 ppm, 1.0 ms; Q=3)
;cpd2:wvm:wudec: cawurst_d-20(220 ppm, 1.4 ms; L2H)

;cnst2: = 1J(CH)
;cnst4: = 1J(NH)
;cnst6: = minimum 1J(CH)
;cnst7: = maximum 1J(CH)
;cnst13: = nJ(CH) long-range
;cnst16: 15N CTP gradient lengthening factor
;cnst17: = -0.5 for Crp60comp.4
;cnst39: 15N HSQC sensitivity factor [1-4]
;cnst40: 15N SW (ppm)
;cnst41: gradient ratio (2*C/H)
;cnst44: gradient ratio (2*N/H)
;cpd2: 13C decoupling according to sequence defined by cpdprg2
;cpd3: 15N decoupling according to sequence defined by cpdprg3
;d0: 13C t1
;d1: relaxation delay
;d2: 1/2J(CH)
;d4: 1/4J(CH)
;d6: 1/8J(CH) for all multiplicities, 1/4J(CH) for CH only
;d7: 1/(2*nJ(CH)), long-range coupling evolution
;d9: DIPSI-2 mixing time (TOCSY)
;d10: 1H t1
;d15: optional ASAP mixing time [40-60 ms] (use `wvm`)
;d16: delay for homospoil/gradient recovery [200 us]
;d20: 15N t1
;d24: 1/4J(NH)
;d26: 1/8J(NH) for all multiplicities, 1/4J(NH) for NH only
;l0: total number of t1 increments
;l1: running counter of t1 increments
;l2: even for echo, odd for antiecho
;l3: running counter for scan number
;l6: loop for ASAP mixing
;l11: DIPSI-2 (1H module): half the number of DIPSI-2 cycles
;l12: DIPSI-2 (1H module): actual number of DIPSI-2 cycles
;p1: f1 channel -  90 degree high power pulse
;p2: f1 channel - 180 degree high power pulse
;p3: f2 channel -  90 degree high power pulse
;p6: f1 channel -  90 degree low power pulse
;p14: f2 channel - 180 degree shaped pulse for inversion
;     = 500usec for Crp60,0.5,20.1
;p16: gradient pulse   [1 ms]
;p17: extended gradient pulse for 15N HSQC
;p19: gradient pulse 2 [600 us]
;p21: f3 channel -  90 degree high power pulse
;p22: f3 channel - 180 degree high power pulse
;p24: f2 channel - 180 degree shaped pulse for refocusing
;      = 2msec for Crp60comp.4
;p31: f2 channel - 180 degree shaped pulse for inversion with J-compensation
;p32: f1 channel - 180 degree shaped pulse (adiabatic)      [20 msec]
;     smoothed chirp (sweepwidth, 20% smoothing, 10000 points)
;p45: f1 channel -  180 degree CAWURST-2 pulse
;pl1: f1 channel - power level for pulse (default)
;pl2: f2 channel - power level for pulse (default)
;pl3: f3 channel - power level for pulse (default)
;pl10: f1 channel - power level for TOCSY-spinlock
;pl12: f2 channel - power level for CPD/BB decoupling
;pl16: f3 channel - power level for CPD/BB decoupling
;sp3: f2 channel - shaped pulse (180 degree inversion)
;sp7: f2 channel - shaped pulse (180 degree refocusing)
;sp18: f2 channel - shaped pulse (180 degree with J-compensation)
;sp29: f1 channel - shaped pulse (adiabatic)
;sp45: f1 channel - CAWURST-2 pulse (180 degree)
;spnam3: Crp60,0.5,20.1 or WaveMaker
;spnam7: Crp60comp.4
;spnam18: Crp60_xfilt.2 or WaveMaker
;spnam29: Crp60,20,20.10
;spnam45: wuASAP (generate via WaveMaker)
;aq: acquisition time
;ds: >= 16
;FnMODE: echo-antiecho
;NBL: number of blocks (NOAH modules)
;ns: 1 * n

; auprog: noah_hmbc:noah_nhsqc:noah_hsqc:noah_cosy:noah_tocsy
; ngn-2.0.6: constructed from C_HMBC_CNF, N_SEHSQC, C_SEHSQC, H_COSY_TOCSY
; pulse programme generated on Wed Apr 07 2021 17:42:43 GMT+0100 (British Summer Time)