; gns_noah2-ABn

; =========================================================================
; set 'NBL' TopSpin parameter to 2
; 
;     [zgoptns: use -DPRESAT for presaturation during d1]
; 13C 1,1-ADEQUATE with ZIP element
; 15N HMBC
;     [zgoptns: use -DNLP3 for 'upgrade' to third-order LPJF]
; =========================================================================

;$CLASS=HighRes
;$DIM=2D
;$TYPE=
;$SUBTYPE=
;$COMMENT=

;J. R. J. Yong, E. Kupce, T. D. W. Claridge
;Anal. Chem. 2022, 94 (4), 2271-2278
;Modular Pulse Program Generation for NMR Supersequences

;E. Kupce, T. D. W. Claridge
;Angew. Chem. Int. Ed. 2017, 56 (39), 11779-11783
;NOAH: NMR Supersequences for Small Molecule Analysis and Structure Elucidation

;B. Reif, M. Kock, R. Kerssebaum, H. Kang, W. Fenical, C. Griesinger
;J. Magn. Reson. 1996, 118 (2), 282-285
;ADEQUATE, a New Set of Experiments to Determine the Constitution of Small Molecules at Natural Abundance

#include <Avance.incl>
#include <Grad.incl>
#include <Delay.incl>

#ifdef NUS
define list<loopcounter> t1list=<$VCLIST>
#endif /* NUS */

define delay DC_ADEQa
define delay DC_ADEQb
define delay DC_ADEQc
define delay DC_ADEQd
define delay DC_ADEQe
define delay DC_ADEQf
define delay DC_ADEQg
define delay DC_ZZFa
define delay DC_ZZFb
define delay DN_HMBC_CFa
define delay DN_HMBC_CFb
define delay DN_LP1
define delay DN_LP2a
define delay DN_LP2b
define delay DN_LP3a
define delay DN_LP3b
define delay DN_LP3c
"cnst44      = 2*sfo3/sfo1"                                  ; gradient ratio
"d0          = 3u"                                           ; 13C HSQC t1
"d4          = 0.25s/cnst2"                                  ; 13C INEPT
"d20         = 3u"                                           ; 15N HMBC t1/2
"d27         = 0.25s/cnst3"                                  ; 1J(CC) evolution
"d28         = d27-4u"
"in0         = inf1/2"                                       ; 13C HSQC increment
"in20        = 1000000/(2*cnst40*sfo3)"                      ; 15N HMBC increment: cnst40 = SW(15N)
"in28        = in0"
"p2          = p1*2"                                         ; 1H hard 180
"p8          = p3*1.333"                                     ; 13C 120 deg pulse
"p17         = p16*cnst16"                                   ; Longer gradients for 15N module
"p22         = p21*2"                                        ; 15N hard 180
"DC_ADEQa    = d4-p14/2"
"DC_ADEQb    = d4+p14/2"
"DC_ADEQc    = d27-p24/2"
"DC_ADEQd    = p16+d16-p2-d0*2+4u"
"DC_ADEQe    = d27-p16-d16-4u-p2-d0"
"DC_ADEQf    = d6-cnst17*p24/2"
"DC_ADEQg    = p16+d16+6u"
"DC_ZZFa     = d4-p14/2"
"DC_ZZFb     = d4+p14/2"
"DN_HMBC_CFa = (0.5s/cnst23)-p16-d16-4u"
"DN_HMBC_CFb = p16+d16+p2/2+d20-p21*2/PI+4u"
"DN_LP1      = 1s/(2*cnst4)-p16-d16"
"DN_LP2a     = 1s/(2*cnst26)-p16-d16"
"DN_LP2b     = 1s/(2*cnst27)-p16-d16"
"DN_LP3a     = 1s/(2*(cnst26+0.07*(cnst27-cnst26)))-p16-d16"
"DN_LP3b     = 1s/(cnst27+cnst26)-p16-d16"
"DN_LP3c     = 1s/(2*(cnst27-0.07*(cnst27-cnst26)))-p16-d16"
define list<gradient> GN_HMBC_CF={cnst44}
"l0      = td1/2"             ; TD1/NBL (i.e. TD1 for ordinary modules)
"l1      = 0"                 ; Running counter for TD1 for ordinary modules (0 on first increment)
"l2      = 0"                 ; Running counter for NS (1 on first scan)
"acqt0   = 0"
baseopt_echo

1 ze
2 30m
3 5m
4 50u UNBLKGRAD

#ifdef NUS
  "d0=(in0*t1list)+3u"
  "d20=(in20*t1list)+3u"
#endif /* NUS */
  1m iu2

  ; Cleanup
  4u pl2:f2
  (p3 ph0):f2
  4u pl3:f3
  (p21 ph0):f3
  4u pl1:f1
  p16:gp0
  d16
  (p1 ph0):f1
  4u
  p16:gp0*1.37
  d16
  4u BLKGRAD
#ifdef PRESAT
  4u pl9:f1
  2m st0
  d1 cw:f1
  4u do:f1
  4u pl1:f1
#else
  d1 st0
#endif /* PRESAT */
  4u UNBLKGRAD


  ; MODULE 1
  ; 13C 1,1-ADEQUATE

  ; check that constant-time period (1/2J(CC)) is longer than t1max
  ; note: don't use d28 because that is being changed every increment!
if "(2 * d27) < (l0 * 2 * in0)"
{
  print "error: ADEQUATE constant-time period is too short: please decrease cnst3, reduce td1, or increase 13C SW"
  goto end
}

  ; ZIP element
#ifdef NOZZFADEQ
  (p1 ph0):f1
#else
  (p1 ph0):f1
  DC_ADEQa
  (p14:sp3 ph0):f2 
  (p2 ph0):f1 
  DC_ADEQb 
  (p1 ph0):f1
  DC_ADEQa
  (p14:sp3 ph0):f2 
  (p2 ph0):f1 
  DC_ADEQb pl2:f2 
  (p1 ph1):f1
#endif

  DC_ADEQa
  (center (p2 ph0):f1 (p14:sp3 ph0):f2 )
  DC_ADEQa pl2:f2
  (p1 ph1):f1 (p3 ph5):f2
  DC_ADEQc
  (p24:sp7 ph0):f2
  DC_ADEQc pl2:f2
  (p3 ph11):f2
  d0
  (p2 ph0):f1
  d0
  DC_ADEQd
  (p24:sp7 ph0):f2
  4u
  p16:gp22
  d16 pl2:f2
  (p8 ph13):f2
  4u
  d28
  (p24:sp7 ph0):f2
  4u
  p16:gp23
  d16
  DC_ADEQe pl2:f2
  (p2 ph0):f1
  d0
  (center (p1 ph0):f1 (p3 ph7):f2 )
  DC_ADEQf
  (center (p2 ph0):f1 (p24:sp7 ph0):f2 )
  DC_ADEQf pl2:f2
  (center (p1 ph1):f1 (p3 ph9):f2 )
  DC_ADEQa
  (center (p2 ph0):f1 (p14:sp3 ph0):f2 )
  DC_ADEQa
  (p1 ph0):f1
  DC_ADEQg
  (p2 ph0):f1
  3u
  p16:gp24*EA
  d16 pl12:f2 
  3u

  goscnp ph22 cpd2:f2
  50u do:f2

  ; Cleanup
  4u pl1:f1
  4u pl2:f2
  (p3 ph0):f2
  4u
  p16:gp0*1.77
  d16
  2m st


  ; MODULE 2
  ; 15N-1H HMBC

  ; zz-filter
#ifdef NOZZF
  ; enable -DNOZZF acquisition flag to remove zz-filter
  ; only do this if you are sure about what you are doing!
  (p1 ph0):f1
#else
  ; zz-filter
  (p1 ph0):f1
  DC_ZZFa
  (p14:sp3 ph0):f2
  (p2 ph0):f1
  DC_ZZFb
  (p1 ph0):f1
  DC_ZZFa
  (p14:sp3 ph0):f2
  (p2 ph0):f1
  DC_ZZFb pl2:f2
  (lalign (p1 ph0):f1 (p3 ph7):f2 )
#endif

  ; low-pass J-filter
#ifdef NLP3
  DN_LP3a
  p16:gp10*2.8
  d16
  (p21 ph7):f3
  DN_LP3b
  p16:gp10*-1.6
  d16
  (p21 ph7):f3
  DN_LP3c
  p16:gp10*-0.8
  d16
  (p21 ph7):f3
  4u
  p16:gp10*-0.4
  d16
#else
#ifdef NLP2
  DN_LP2a
  p16:gp10*-3
  d16
  (p21 ph7):f3
  DN_LP2b
  p16:gp10*2
  d16
  (p21 ph7):f3
  4u
  p16:gp10
  d16
#else
  DN_LP1
  p16:gp10*-1
  d16
  (p21 ph7):f3
  4u
  p16:gp10
  d16
#endif
#endif

  ; nJ(CH) evolution
  DN_HMBC_CFa
  ; coherence transfer to 13C and t1
  (p21 ph7):f3
  DN_HMBC_CFb
  (p22 ph0):f3
  4u
  p17:gp1
  d16
  d20
  (p2 ph11):f1
  d20
  4u
  p17:gp1
  d16
  (p22 ph0):f3
  DN_HMBC_CFb
  (p21 ph4):f3
  (p2 ph0):f1
  4u
  p17:gp1*EA*GN_HMBC_CF
  d16
  4u
  go=2 ph29

  ; incrementation on every pass
  1m iu1
  1m igrad EA
  1m ip9*2
  30m wr #0 if #0 zd

  ; incrementation on every second pass
if "l1 % 2 == 0" {
  1m ip5*2
  1m ip22*2
#ifdef NUS
  1m t1list.inc
#else
  1m id0
  1m dd28
#endif /* NUS */
#ifdef NUS
  1m ip4*2
  1m ip29*2
#endif /* NUS */
}
#ifdef NUS
#else
if "l1 % (2 * cnst39) == 0"
{
  1m ip4*2
  1m ip29*2
  1m id20
}
#endif /* NUS */
  lo to 4 times l0

end, 4u
50u BLKGRAD
exit

ph0=0
ph1=1
ph4=0 2
ph5=0 2
ph7=0 0 2 2
ph9=1 1 3 3
ph11=0 0 0 0 2 2 2 2
ph13=0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2
ph22=0 2 2 0 2 0 0 2 2 0 0 2 0 2 2 0
ph29=0 2 2 0

;gpnam0: SMSQ10.100
;gpnam1: SMSQ10.100
;gpnam10: SMSQ10.100
;gpnam22: SMSQ10.100
;gpnam23: SMSQ10.100
;gpnam24: SMSQ10.100
;gpz0: 29% (for purging)
;gpz1: 80% (HMBC CTP)
;gpz10: 5% (HMBC J-filter)
;gpz22: 78.5% (13C ADEQUATE CTP)
;gpz23: 77.6% (13C ADEQUATE CTP)
;gpz24: -59% (13C ADEQUATE CTP)

;WaveMaker shaped pulses (use 'wvm -a' to generate)
;sp3:wvm:wu180C13: cawurst-20(60 kHz, 0.5 ms; L2H)
;cpd2:wvm:wudec: cawurst_d-20(220 ppm, 1.4 ms; L2H)

;d0: 13C t1
;d4: 1/4J(CH)
;d20: 15N t1
;d27: 1/4J(CC)
;d28: decremented delay for 1,1-ADEQUATE
;d16: delay for homospoil/gradient recovery [200 us]
;d6: 1/8J(CH) for all multiplicities, 1/4J(CH) for CH only
;d1: relaxation delay
;d2: 1/2J(CH)
;cnst2: = 1J(CH)
;cnst3: = 1J(CC)
;cnst4: = 1J(NH)
;cnst16: 15N CTP gradient lengthening factor
;cnst17: = -0.5 for Crp60comp.4
;cnst23: = nJ(NH) long-range
;cnst26: = minimum 1J(NH)
;cnst27: = maximum 1J(NH)
;cnst39: 15N HSQC sensitivity factor [1-4]
;cnst40: 15N SW (ppm)
;cnst44: gradient ratio (2*N/H)
;cpd2: 13C decoupling according to sequence defined by cpdprg2
;l0: TD1 / NBL, i.e. 'true TD1'
;l1: running counter for true TD1 (0 on first increment)
;p1: f1 channel -  90 degree high power pulse
;p2: f1 channel - 180 degree high power pulse
;p3: f2 channel -  90 degree high power pulse
;p8: f2 channel - 120 degree high power pulse (1,1-ADEQUATE)
;p14: f2 channel - 180 degree inversion [500 us for Crp60,0.5,20.1]
;p16: gradient pulse [1 ms]
;p17: extended gradient pulse for 15N HSQC
;p21: f3 channel -  90 degree high power pulse
;p22: f3 channel - 180 degree high power pulse
;p24: f2 channel - 180 degree refocusing [2 ms for Crp60comp.4]
;pl1: f1 channel - power level for pulse (default)
;pl2: f2 channel - power level for pulse (default)
;pl3: f3 channel - power level for pulse (default)
;pl9: f1 channel - power level for presaturation
;pl12: f2 channel - power level for CPD/BB decoupling
;sp3: 13C adiabatic inversion
;sp7: 13C composite adiabatic refocusing
;spnam3: Crp60,0.5,20.1 or WaveMaker
;spnam7: Crp60comp.4
;aq: acquisition time
;ds: >= 16
;FnMODE: echo-antiecho
;NBL: number of blocks (NOAH modules)
;ns: 1 * n

; auprog: noah_hsqc:noah_nhmbc
; splitx_title: 13C 1,1-ADEQUATE:15N HMBC
; module identifiers: C_ADEQ N_HMBC_CF
; pulse programme created by genesis-v2.2.7, https://nmr-genesis.co.uk
; Tue Feb 28 2023 23:50:13 GMT+0000 (Greenwich Mean Time)
